tail(gdp)
tail(gdp,50)
gdp[100,]
gdp[200,]
gdp[300,]
gdp[250,]
gdp[220,]
gdp[210,]
gdp[2230,]
gdp[230,]
gdp[240,]
gdp[235,]
gdp[230,]
gdp[210,]
gdp[215,]
gdp[216,]
gdp[1:216,]
gdp[1:215,]
gdp2<-gdp[1:215,]
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
gdp2<-gdp[c(1:190,191:215),]
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
gdp2
gdp2<-gdp[c(1:190,192:215),]
gdp2
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
gdp2$code
unique(gdp2$code)
count(unique(gdp2$code))
length(unique(gdp2$code))
length(gdp2$code)
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
gdp2$code
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
countries$CountryCode
length(countries$CountryCode)
length(unique(countries$CountryCode))
d <- merge(gdp2,countries,by.x=gdp2$code,by.y=countries$CountryCode)
d <- merge(gdp2,countries,by.x="code",by.y="CountryCode")
names(d)
sum(!is.na($code)
sum(!is.na($code))
sum(!is.na(d$code))
sum(d$code)
length(d$code)
gdp2<-gdp[c(1:190),]
d <- merge(gdp2,countries,by.x="code",by.y="CountryCode")
length(d$code)
?sort
d[order(d$gdp),]
d[order(d$gdp),][13]
d[order(d$gdp),][13,]
?order
d[order(d$gdp, decreasing=TRUE),][13,]
d[order(d$gdp, decreasing=TRUE),][11:13,]
d$g2 <- as.numeric(d$gdp)
d[order(d$g2, decreasing=TRUE),][11:13,]
d[order(d$rank, decreasing=TRUE),][11:13,]
d$r2 <- as.numeric(d$rank)
d$r2
d[order(d$r2, decreasing=TRUE),][11:13,]
length(d)
d <- merge(gdp2,countries,by.x="code",by.y="CountryCode")
dim(d)
d[order(d$r2, decreasing=TRUE),][13,1]
d[order(d$rank, decreasing=TRUE),][13,1]
d$rank
d$rr <- as.numeric(d$rank)
d$rr
d[order(d$rr),][1,]
d[order(d$rr, decreasing=TRUE),][1,]
d[order(d$rr, decreasing=TRUE),][13,]
d[order(d$rr, decreasing=TRUE),][12,]
d[order(d$rr, decreasing=TRUE),][14,]
names(d)
unique(d$Income.Group)
mean(d$gdp)
d$gdp2 <- as.numeric(d$gdp)
mean(d$gdp)
mean(d$gdp2)
mean(d$rank)
mean(d$rr)
mean(d[,2])
mean(d[,3])
mean(d[,4])
names(d)
mean(d[,41])
mean(d[d$Income.Group == 'High income: OECD'][,41])
d[d$Income.Group == 'High income: OECD']
mean(d[d$Income.Group == 'High income: OECD',41])
mean(d[d$Income.Group == 'High income: nonOECD',41])
summary(d$ee)
summary(d$rr)
d[1,]
d[1,5]
as.numerid(d[1,5])
as.numeric(d[1,5])
?read.csv
gdp <- read.csv('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'), dec=",")
head(gdp)
head(gdp$gdp)
as.numeric(gdp$gdp)
gdp <- read.csv('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'), dec=",", colClasses=c('character','numeric','character','character', 'numeric'))
readLines('/tmp/foo.csv')
gdp <- read.csv('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'), dec=",", colClasses=c('character','numeric','character','character', 'numeric'))
gdp <- read.csv2('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'), dec=",", colClasses=c('character','numeric','character','character', 'numeric'))
gdp <- read.csv2('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'))
gdp <- read.csv2('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'))
gdp <- read.csv2('/tmp/foo.csv', skip=4, col.names=c('code','rank','f','name', 'gdp','xxxx','xxx','xx','x','g'), sep=',')
head(gdp)
type(gdp)
?as.numeric
as.numerid(d[1,5])
as.numerid(d[1,5])
mean(d[d$Income.Group == 'High income: OECD',41])
d$gdp2 <- as.numeric(sub(",", ".", d$gdp, fixed=TRUE))
d$gdp2
mean(d[d$Income.Group == 'High income: OECD'][,41])
mean(d[d$Income.Group == 'High income: OECD',][,41])
mean(d[d$Income.Group == 'High income: OECD',][,40])
names(gdp2)
names(d)
mean(d[d$Income.Group == 'High income: OECD',][,41])
mean(d[d$Income.Group == 'High income: nonOECD',][,41])
d$rank
as.numeric(d$rank)
unique(as.numeric(d$rank))
length(unique(as.numeric(d$rank)))
length(as.numeric(d$rank))
hist(as.numeric(d$rank))
length(as.numeric(d$rank))
hist(unique(as.numeric(d$rank)))
tail($drank)
tail(f$rank)
tail(d$rank)
head(d$rank)
factors(d)
factor(d)
attributes(d$rank)
d$rank == "a. Includes Former Spanish Sahara.  b. Excludes South Sudan  c. Covers mainland Tanzania only. d. Data are for the area "
d[d$rank == "a. Includes Former Spanish Sahara.  b. Excludes South Sudan  c. Covers mainland Tanzania only. d. Data are for the area "]
d[d$rank == "a. Includes Former Spanish Sahara.  b. Excludes South Sudan  c. Covers mainland Tanzania only. d. Data are for the area ",]
d[d$rank == "a. Includes Former Spanish Sahara.  b. Excludes South Sudan  c. Covers mainland Tanzania only. d. Data are for the area",]
?bzfile
f <- bzfile(dir()[1])
head(f)
head(readLines(f,10))
head(readLines(f,1))
head(readLines(f))
dir()[1]
setwd(dir()[1])
dir()[1]
setwd(dir()[1])
dir()
f <- bzfile(dir()[1])
head(readLines(f,10))
data <- read.csv(f)
head(data)
library(ggplot2)
qplot(FATALITIES, data=data)
summary(data$FATALITIES)
summary(data$INJURIES)
summary(dataEVTYPE)
summary(data$EVTYPE)
summary(sort(data$EVTYPE))
summary(data$EVTYPE == 'LANDSLIDE')
summary(data$EVTYPE == 'DEBRIS FLOW')
unique(data$EVTYPE)
sort(unique(data$EVTYPE))
head(data)
summary(data$FATALITY)
summary(data$FATALITIES)
sort(unique(data$FATALITIES))
sort(unique(data$INJURIES))
?levenshteinSim
??levenshteinSim
?gsub
agrep('STRONG WIND GUST',data$EVTYPE)
agrep('STRONG WIND GUST',data$EVTYPE, value=TRUE)
agrep('STRONG WIND GUST',data$EVTYPE, value=TRUE, max.distance = 0.3)
length(agrep('STRONG WIND GUST',data$EVTYPE, value=TRUE, max.distance = 0.3))
length(agrep('STRONG WIND GUST', unique(data$EVTYPE), value=TRUE, max.distance = 0.3))
agrep('STRONG WIND GUST', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
unique(data$EVTYPE)
agrep('STRONG WIND GUST', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
agrep('EXTREME COLD', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
agrep('EXTREME HEAT', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
factors(data$EVTYPE)
factor(data$EVTYPE)
unique(factor(data$EVTYPE))
data[data$REFNUM==605943]
data[data$REFNUM==605943,]
data <- read.csv(f, stringsAsFactors=FALSE)
data <- read.csv(bzfile('repdata-data-StormData.csv.bz2'), stringsAsFactors=FALSE)
names(data)
head(data)
dbackup <- data
agrep('STRONG WIND GUST', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
install.packages('tm')
?tm
??tm
install.packages('openNLP')
library(openNLP)
tagPOS('STRONG WIND GUST')
?tagPOST
?tagPOS
?openNLP
??openNLP
library(NLP)
tagPOS('STRONG WIND GUST')
pos_tag_annotator <- Maxent_POS_Tag_Annotator()
annotate('STRONG WIND GUST', pos_tag_annotator)
s <- 'STRONG WIND GUST'
sent_token_annotator <- Maxent_Sent_Token_Annotator()
word_token_annotator <- Maxent_Word_Token_Annotator()
a2 <- annotate(s, list(sent_token_annotator, word_token_annotator))
a3 <- annotate(s, pos_tag_annotator, a2)
a3
a3 <- annotate('GREEN DESK', pos_tag_annotator, a2)
a3
s <- 'GREEN DESK'
sent_token_annotator <- Maxent_Sent_Token_Annotator()
word_token_annotator <- Maxent_Word_Token_Annotator()
a2 <- annotate(s, list(sent_token_annotator, word_token_annotator))
a3 <- annotate('GREEN DESK', pos_tag_annotator, a2)
a3
agrep('STRONG WIND GUST', unique(data$EVTYPE), value=TRUE, max.distance = 0.3)
checked = c("")
'STRONG WIND GUST' %in% checked
rbind(c, "STRONG WIND GUST")
rbind(c, c("STRONG WIND GUST"))
rbind(checked, c("STRONG WIND GUST"))
checked
rbind(checked, "STRONG WIND GUST")
append(checked, "STRONG WIND GUST")
checked <- append(checked, "STRONG WIND GUST")
'STRONG WIND GUST' %in% checked
'STRONG WIND GUST' !%in% checked
'STRONG WIND GUST' %!in% checked
!('STRONG WIND GUST' %in% checked)
!('STRONG WIND GUST' %in% checked)
data$EVTYPE
unique(data$EVTYPE)
sort(unique(data$EVTYPE))
replace
replace(unique(data$EVTYPE),c("WND"),c("WIND")
)
replace(unique(data$EVTYPE),c("WND"),c("WIND"))
str(replace(unique(data$EVTYPE),c("WND"),c("WIND")))
str(sort(unique(data$EVTYPE)))
str(replace(unique(data$EVTYPE),"WND","WIND"))
str(replace(unique(data$EVTYPE),data$EVTYPE=="WND","WIND"))
sum(data$EVTYPE=="WND")
data[data$EVTYPE=="WND",]
data[data$EVTYPE=="WND",8]
replace(c("a","b", "c"),"a", "b")
list <- c("a", "b", "c", "d")
list[list == 'a'] <- "b"
list
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
checked
append(checked, "STRONG WIND GUST")
checked
source('~/Coursera/repdata/normalizer.R')
unique(data$EVTYPE)
unique(normalize_type(data$EVTYPE))
ss <- data[1:100,9]
unique(ss)
ss <- data[1:100,8]
unique(ss)
ss <- data[1:1000,8]
unique(ss)
ss <- data[1:10000,8]
unique(ss)
ss <- data[1:100000,8]
unique(ss)
unique(data[1:100000,8])
unique(data[100000:200000,8])
unique(data[100000:120000,8])
unique(data[100000:130000,8])
unique(data[100000:140000,8])
unique(data[100000:170000,8])
unique(data[100000:200000,8])
unique(data[180000:200000,8])
unique(data[190000:200000,8])
unique(normalize_type(ss))
unique(data[195000:200000,8])
unique(data[199000:200000,8])
unique(data[199500:200000,8])
ss <- data[199500:200000,8]
ss
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
source('~/Coursera/repdata/normalizer.R')
normalize_type(ss)
unique(normalize_type(ss))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss))
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss))
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss))
unique(normalize_type(ss,loops=10))
unique(normalize_type(ss,distance=0.25, loops=10))
?sub
gsub('extreme', '', c('EXTREME HEAT', "WIND"))
gsub('/extreme/i', '', c('EXTREME HEAT', "WIND"))
gsub('/extreme/i', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('extreme', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('/extreme/i', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE, fixed=TRUE)
gsub('extreme', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('extreme', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub(c('extreme','excessive'), '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub(c('extreme','excessive'), '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
sort(unique(data$EVTYPE))
gsub('extrem*', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('(extrem*)', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('(extrem+)', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
gsub('(extrem)', '', c('EXTREME HEAT', "WIND"), ignore.case=TRUE)
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss,distance=0.25, loops=10))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss,distance=0.25, loops=10))
unique(normalize_type(ss,distance=0.2, loops=10))
unique(normalize_type(ss,distance=0.1, loops=10))
trim
?trim
??trim
str_trim
library(stringr)
str_trim
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss,distance=0.1, loops=10))
unique(normalize_type(data$EVTYPE,distance=0.1, loops=10))
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss,distance=0.1, loops=10))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(ss,distance=0.1, loops=10))
time(unique(normalize_type(ss,distance=0.1, loops=10)))
system.time(unique(normalize_type(ss,distance=0.1, loops=10)))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
?data.able()
?data.table
read.table
?read.table
library(data.table)
read.table
?data.table
foo <- data.table(data$EVTYPE)
str(foo)
unique(foo)
sort(unique(foo))
sort(unique(foo,1))
sort(unique(foo))
length(unique(foo)
)
unique(foo)
unique(foo)[1]
unique(foo)[,1]
unique(foo)[order(v1)]
unique(foo)[order(V1)]
source('~/Coursera/repdata/normalizer.R')
foo <- data.table(removeAdjectives(data$EVTYPE))
unique(foo)[order(V1)]
example(data.table)
foo
foo[,V1]
source('~/Coursera/repdata/normalizer.R')
foo
unique(foo)
sort(unique(foo))
unique(foo)[order(V1)]
source('~/Coursera/repdata/normalizer.R')
unique(foo)[order(V1)]
length(unique(foo)[order(V1)])
nrow(unique(foo)[order(V1)])
agrep("WIND", foo[,V1], value=TRUE, max.distance = distance)
agrep("WIND", foo[,V1], value=TRUE, max.distance = 0.1)
unique(foo)[order(V1)]
u_foo <- unique(foo)[order(V1)]
similar <- agrep("WIND", u_foo[,V1], value=TRUE, max.distance = 0.1)
similar
foo[V1 == similar[1]] <- "foo"
nrows(foo)
nrow(foo)
foo
nrow(data$EVTYPE)
length(data$EVTYPE)
foo
foo[1]
foo[1,]
foo[1,1]
foo[[1]
foo[[1]]
foo[[1]]
foo[[1,1]]
foo[[2,1]]
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
types <- data.table(data$EVTYPE)
u_types <- unique(types)[order(V1)]
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
u_types <- unique(types)
u_types
u_types[,]
u_types[1,]
u_types[,1]
u_types[V1]
u_types[, V1]
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
u_types[[1, 1]]
u_types[, "V1"]
u_types[[1]]
source('~/Coursera/repdata/normalizer.R')
unique(normalize_type(data$EVTYPE,distance=0.1, loops=1))
names(data)
data$END_DATE
unique(data$END_DATE)
data$date <- strptime(data$date, "%m/%d/%Y %H:%M:%s")
data$date <- strptime(data$END_DATE, "%m/%d/%Y %H:%M:%s")
summary(data$date)
?strptime
data$END_DATE
data$END_DATE[6000]
data$END_DATE[200000]
data$END_DATE[2000000]
data$END_DATE[200000]
data$ENDDATE[200000]
names(data)
data$ENDDATE[500000]
data$END_DATE[500000]
strptime(data$END_DATE[500000], "%m/%d/%Y %H:%M:%S")
data$date <- strptime(data$END_DATE, "%m/%d/%Y %H:%M:%S")
summary(data$date)
data2 <- data[data$date > '2000-01-01 00:00:00']
data2 <- data[data$date > '2000-01-01 00:00:00',]
summary(data2$date)
unique(normalize_type(data2$EVTYPE,distance=0.1, loops=1))
a <- normalize_type(data2$EVTYPE,distance=0.1, loops=1)
source('~/Coursera/repdata/normalizer.R')
a <- normalize_type(data2$EVTYPE,distance=0.1, loops=1)
a
unique(a[[1]])
data2$type <- a
data2$type <- factor(a)
a
data2$type <- factor(a[[1]])
?tapply
tapply(data2$INJURIES, data2$type, FUN=sum)
tapply(data2$FATALITIES, data2$type, FUN=sum)
str(tapply(data2$FATALITIES, data2$type, FUN=sum))
sort(tapply(data2$FATALITIES, data2$type, FUN=sum))
sort(tapply(data2$FATALITIES, data2$type, FUN=sum), descending=TRUE)
?sort
sort(tapply(data2$FATALITIES, data2$type, FUN=sum), =TRUE)
sort(tapply(data2$FATALITIES, data2$type, FUN=sum), TRUE)
sort(tapply(data2$FATALITIES, data2$type, FUN=sum), TRUE)[1:5,]
sort(tapply(data2$FATALITIES, data2$type, FUN=sum), TRUE)[1:5]
sort(tapply(data2$INJURIES, data2$type, FUN=sum), TRUE)[1:5]
hist(tapply(data2$INJURIES, data2$type, FUN=sum))
hist(sort(tapply(data2$INJURIES, data2$type, FUN=sum), TRUE)[1:50])
hist(sort(tapply(data2$INJURIES, data2$type, FUN=sum), TRUE)[1:10])
hist(sort(tapply(data2$INJURIES, data2$type, FUN=sum), TRUE)[1:5])
plot(sort(tapply(data2$INJURIES, data2$type, FUN=sum), TRUE)[1:5])
plot(sort(tapply(data2$IFATALITIES, data2$type, FUN=sum), TRUE)[1:5])
plot(sort(tapply(data2$FATALITIES, data2$type, FUN=sum), TRUE)[1:5])
source('~/Coursera/repdata/normalizer.R')
